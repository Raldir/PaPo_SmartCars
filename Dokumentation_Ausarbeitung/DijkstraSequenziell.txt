std::vector<Spawner*> spawners = _graph->getSpawner();
	std::vector<Edge*> _edges = _graph->getEdges();
	std::map<int, Vertex*> _vertexMap = _graph->getVertexMap();
	std::vector<Vertex*> _vertices = _graph->getVertices();

	typedef adjacency_list<listS, vecS, directedS, no_property,
		property<edge_weight_t, int> > mygraph_t;
	typedef property_map<mygraph_t, edge_weight_t>::type WeightMap;
	typedef mygraph_t::vertex_descriptor vertex;
	typedef mygraph_t::edge_descriptor edge_descriptor;

	unsigned int num_edges = unsigned int(_edges.size());
	// create graph
	mygraph_t g(_graph->getNumberVertices());
	WeightMap weightmap = get(edge_weight, g);
	for (std::vector<Edge*>::iterator it = _edges.begin(); it != _edges.end(); it++) {
		{
			edge_descriptor e; bool inserted;
			tie(e, inserted) = add_edge((*it)->getVertices().first->getID(),
				(*it)->getVertices().second->getID(), g);
			weightmap[e] = int((*it)->getLength());
		}
	}
	for (spawnerContainer::iterator it2 = _spawner.begin(); it2 != _spawner.end(); it2++) {
		int start = (*it2)->getID();
		std::map<int, float> distances;
		for (spawnerContainer::iterator it = spawners.begin(); it != spawners.end(); it++) {
			int goal = (*it)->getID();

			//Speicher alle Abstände von Knoten zum Startknoten
			distances[goal] = _vertexMap[start]->distanceTo(_vertexMap[goal]);
			int sumDistance = 0;
			//Bei Parallelisierung wird diese Zeile nicht beachtet, was in der theorie zu einem zweifachen aufwand führt
			//if (!(getRoute(goal, start).empty()))	continue;

			std::vector<mygraph_t::vertex_descriptor> p(num_vertices(g));
			std::vector<int> d(num_vertices(g));
			dijkstra_shortest_paths(g, start,
				predecessor_map(boost::make_iterator_property_map(p.begin(), get(boost::vertex_index, g))).
				distance_map(boost::make_iterator_property_map(d.begin(), get(boost::vertex_index, g))));

			//std::cout << "distances and parents:" << std::endl;
			//graph_traits < mygraph_t >::vertex_iterator vi, vend;
			//for (boost::tie(vi, vend) = vertices(g); vi != vend; ++vi) {
			//	std::cout << "distance(" << *vi << ") = " << *vi << ", ";
			//	std::cout << "parent(" << *vi << ") = " << p[*vi] << std::
			//		endl;
			//}
			//std::cout << std::endl;

			for (spawnerContainer::iterator vi = _spawner.begin(); vi != _spawner.end(); vi++) {
				std::cout << "distance(" << (*vi)->getID() << ") = " << d[(*vi)->getID()] << ", ";
				int currentStatus = p[(*vi)->getID()];
				std::cout << "route:" << (*vi)->getID() << " ";
				while (currentStatus != start) {
					std::cout << _vertexMap[currentStatus]->getID() << " ";
					currentStatus = p[currentStatus];
				}
				std::cout << std::endl;
			}
			std::cout << std::endl;
		}
	}