###########

Implementation der Updates durch Edges:
	--> Ansatz: Jeder Edge mit einer roten Ampel bekommt aufforderung zu Update.
	Updated jede Edge hinter sich die grünes Licht hat, damit jedes Auto den berechneten Zustand des jetzigen ticks bekommt. (VERWORFEN)
	
	--> Jede Edge wird geupdated und danach wird jede Edge max. n-mal mit UpdateOverflow geupdated
	

ID für Autos:

	Paralellisierung von ID zuweisen nicht praktisch(?)
	Nun wird vergleich der Pointer benutzt
	
	--> evtl. Lösung später (?)

	
	
Update ticks:
Update ticks werden von oben weitergereicht um synchornität zu gewährleisten


Benachrichtigung der Edge ihre Füllung:
	Erstmal über Beobachtermuster --> informiert bei änderung des zustandes
	
	Alternativ --> abfrage durch vertex
	
An Kreuzungen:
	Wollen Autos aus zwei incomingEdges in die gleiche OutgoingEdge abbiegen, so ist das Ergebnis abhängig von der Updatereihenfolge.

	
TIMETABLE:
	Jede Edge hat einen Timetable --> interval ist länge der straße
	
	Gewichte bei erstellen des Autos zugewiesen
	
	Bei Routenfindung werden potentielle Zielspawnerknoten in der nähe des echten Ziels gesucht.
	Zu jedem dieser Knoten werden die Kosten berechnet (Start-Zielspawnerknoten)
	
	TODO Auto merkt sich wie lange es lebt/ wann es angefangen hat
	TODO Auto merkt sich Route
	
	Bei entfernen des Gewichts auf Edge braucht man: (siehe auch addT
		50g Autoerzeugungzeitpunkt / vergangene Zeit seit Erzeugung
			Distanz vom Startpunkt --> Inkrementieren bei jedem Update
			Remove that filth at the correct timestamp
	
ZUKUNFT:

SIMULATION SECONDS PER TICK ---> interpretation von ticks durch reale zeitheiten --> übetragbarkeit auf realität

Wie regeln mit dem overflow der sich ansammelt und in nächsten tick abarbeiten muss.

Nun, beschlossen sequentiell zweite Updatewelle zu machen und dort den overflow zu handeln


Innerhalb von Prozess für sich erstes Update jede Edge

2. Schritt overflow innerhalb von Prozess berechnet und behandelt.

3. overflow-handling interprozess nach allen interen updates.
	--> wenn platz ist, übertragen, wenn nicht bleibt es.
	
	

	
	
Unabhängiges Updaten des Graphen

Sonntag, 20. August 2017
19:26

 1. Edges updaten unabhängig vonaneinder
 2. Spezialfall: Autos die Die Edge wechseln wollen
 

1. Spezialfall: Autos die Die Edge wechseln wollen

1Schirtt update alle Edges 
2.a Buffer: Nur Edges die Rüberwollen
2.b Edges die toll sind

Momentane Lösung:
 1. Jeder Prozess updated erstmal intern sequenziell:
  a. Erstes Update updated jede Edge und speichert Overflow der Autos
  b. Iteriere durch alle Autos mit Overflow und schau ob sich welche Bewegen können und mache dieses maximal n mal mit n: Anzahl der Autos mit Overflow.
 2. Behandlung von möglichen Overflowen bei Autos die in einen neuen Prozess wollen. Benachrichtigung des zu eintretenden Prozesses, ob Platz da war, und benachrichtige mom. Prozess des Autos. Je nach Ergebnis bewege oder bleibe stehen.

Problematisch: Natürlich könnte das Auto welches alle anderen Autos das Bewegen erlaubt genau der sein der sich zwischen Zwei prozessen befindet. Wir ignoreieren das und machen eine Approximation. Generell ist alles Approximiert. Im schlimmsten Fall ändert sich das Programm ein wenig. B sollte gemacht werden, 2 ist nicht sooo schlimm…
